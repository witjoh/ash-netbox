<% |
    String $server,
    String $service_account_cn,
    Sensitive[String] $service_account_password,
    String $service_account_ou,
    String $dc,
    String $netbox_group_ou,
    String $netbox_ro_user_cn,
    String $netbox_admin_user_cn,
    String $netbox_super_user_cn,
    Optional[String] $log_file_path,
    Integer $log_file_max_bytes,
    Integer $num_of_log_backups
   | -%>

import ldap
from django_auth_ldap.config import LDAPSearch, GroupOfNamesType
import logging, logging.handlers
from django_auth_ldap.config import LDAPGroupQuery
from django_auth_ldap.config import LDAPSearch, GroupOfNamesType, NestedGroupOfNamesType
from django_auth_ldap.config import ActiveDirectoryGroupType, NestedActiveDirectoryGroupType

<% if $log_file_path { -%>
logfile = '<%= $log_file_path %>'
my_logger = logging.getLogger('django_auth_ldap')
my_logger.setLevel(logging.DEBUG)
handler = logging.handlers.RotatingFileHandler(
logfile, maxBytes=<%= $log_file_max_bytes %>, backupCount=<%= $num_of_log_backups %>)
my_logger.addHandler(handler)
<% } -%>

# Server URI
AUTH_LDAP_SERVER_URI = "ldap://<%= $server %>"
AUTH_LDAP_START_TLS = True

# The following may be needed if you are binding to Active Directory.
AUTH_LDAP_CONNECTION_OPTIONS = {
    ldap.OPT_REFERRALS: 0
}

# Set the DN and password for the NetBox service account.
AUTH_LDAP_BIND_DN = "<%= $service_account_cn %>,<%= $service_account_ou %>,<%= $dc %>"
AUTH_LDAP_BIND_PASSWORD = "<%= $service_account_password %>"

# Include this setting if you want to ignore certificate errors. This might be needed to accept a self-signed cert.
# Note that this is a NetBox-specific setting which sets:
#     ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)
LDAP_IGNORE_CERT_ERRORS = True

# This search matches users with the sAMAccountName equal to the provided username. This is required if the user's
# username is not in their DN (Active Directory).
AUTH_LDAP_USER_SEARCH = LDAPSearch("<%= $dc %>",
                                    ldap.SCOPE_SUBTREE,
                                    "(&(objectClass=*)(sAMAccountName=%(user)s))")

# # If a user's DN is producible from their username, we don't need to search.
# AUTH_LDAP_USER_DN_TEMPLATE = None

# You can map user attributes to Django attributes as so.
AUTH_LDAP_USER_ATTR_MAP = {
    "username": "sAMAccountName",
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail"
}

# This search ought to return all groups to which the user belongs. django_auth_ldap uses this to determine group
# hierarchy.
AUTH_LDAP_GROUP_SEARCH = LDAPSearch("<%= $dc %>", ldap.SCOPE_SUBTREE,
                                    "(objectClass=group)")
AUTH_LDAP_GROUP_TYPE = NestedGroupOfNamesType()

# Define a group required to login.
AUTH_LDAP_REQUIRE_GROUP = (
    LDAPGroupQuery("<%= $netbox_admin_user_cn %>,<%= $netbox_group_ou %>,<%= $dc %>")
    | LDAPGroupQuery("<%= $netbox_ro_user_cn %>,<%= $netbox_group_ou %>,<%= $dc %>")
)

# Define special user types using groups. Exercise great caution when assigning superuser status.
AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    "is_active": (
        LDAPGroupQuery("<%= $netbox_admin_user_cn %>,<%= $netbox_group_ou %>,<%= $dc %>")
    | LDAPGroupQuery("<%= $netbox_ro_user_cn %>,<%= $netbox_group_ou %>,<%= $dc %>")
    ),
    "is_staff": (
      LDAPGroupQuery("<%= $netbox_admin_user_cn %>,<%= $netbox_group_ou %>,<%= $dc %>")
    ),
    "is_superuser": (
      LDAPGroupQuery("<%= $netbox_super_user_cn %>,<%= $netbox_group_ou %>,<%= $dc %>")
    ),
}

# Mirror LDAP group assignments.
AUTH_LDAP_MIRROR_GROUPS = True

# For more granular permissions, we can map LDAP groups to Django groups.
AUTH_LDAP_FIND_GROUP_PERMS = True

AUTH_LDAP_ALWAYS_UPDATE_USER = True

AUTH_LDAP_CACHE_GROUPS = False

# Cache groups for one hour to reduce LDAP traffic
AUTH_LDAP_CACHE_TIMEOUT = 3600
